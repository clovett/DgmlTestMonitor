<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet  type='text/xsl' href='doc.xslt'?>
<!--#################################################-->
<!--###  This file was generated by ILToXml.exe.  ###-->
<!--###  Do not edit by hand.                     ###-->
<!--#################################################-->
<doc>
  <assembly>
    <name>LovettSoftware.DgmlTestModeling</name>
    <class name="SmartSocketClient" namespace="Microsoft.Coyote.SmartSockets" static="true">
      <implements name="IDisposable" namespace="System" />
      <field name="DisconnectMessageId" public="true" static="true" value="DisconnectMessageId.3d9cd318-fcae-4a4f-ae63-34907be2700a">
        <type name="string" namespace="System" />
      </field>
      <field name="ConnectedMessageId" public="true" static="true" value="ConnectedMessageId.822280ed-26f5-4cdd-b45c-412e05d1005a">
        <type name="string" namespace="System" />
      </field>
      <field name="MessageAck" public="true" static="true" value="MessageAck.822280ed-26f5-4cdd-b45c-412e05d1005a">
        <type name="string" namespace="System" />
      </field>
      <field name="ErrorMessageId" public="true" static="true" value="ErrorMessageId.385ff3c1-84d8-491a-a8b3-e2a9e8f0e256">
        <type name="string" namespace="System" />
      </field>
      <field name="OpenBackChannelMessageId" public="true" static="true" value="OpenBackChannel.bd89da83-95c8-42e7-bf4e-6e7d0168754a">
        <type name="string" namespace="System" />
      </field>
      <method name="FindServerAsync" static="true" public="true">
        <!--nodocs-->
        <params>
          <arg var="serviceName" name="void" namespace="System" />
          <arg var="clientName" name="SmartSocketClient" namespace="Microsoft.Coyote.SmartSockets" />
          <arg var="resolver" name="string" namespace="System" />
          <arg var="token" name="string" namespace="System" />
          <arg var="udpGroupAddress" name="SmartSocketTypeResolver" namespace="Microsoft.Coyote.SmartSockets" />
          <arg var="udpGroupPort" name="CancellationToken" namespace="System.Threading" />
        </params>
        <returns name="Task`1" namespace="System.Threading.Tasks" />
      </method>
      <method name="OpenBackChannel" public="true">
        <!--nodocs-->
        <params>
          <arg var="connectedHandler" name="void" namespace="System" />
        </params>
        <returns name="Task`1" namespace="System.Threading.Tasks" />
      </method>
      <method name="SendReceiveAsync" public="true">
        <!--nodocs-->
        <params>
          <arg var="msg" name="void" namespace="System" />
        </params>
        <returns name="Task`1" namespace="System.Threading.Tasks" />
      </method>
      <method name="SendAsync" public="true">
        <!--nodocs-->
        <params>
          <arg var="msg" name="SocketMessage" namespace="Microsoft.Coyote.SmartSockets" />
        </params>
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="ReceiveAsync" public="true">
        <!--nodocs-->
        <returns name="Task`1" namespace="System.Threading.Tasks" />
      </method>
      <method name="Dispose" public="true" virtual="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <property name="Name" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="ServerName" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="IsConnected" public="true" get="true">
        <type name="Boolean" namespace="System" />
      </property>
      <property name="BackChannel" public="true" get="true" set="true">
        <type name="SmartSocketClient" namespace="Microsoft.Coyote.SmartSockets" />
      </property>
      <event name="Error" public="true">
        <type name="EventHandler&lt;Exception&gt;" namespace="System" />
      </event>
      <event name="Disconnected" public="true">
        <type name="EventHandler" namespace="System" />
      </event>
    </class>
    <class name="SmartSocketServer" namespace="Microsoft.Coyote.SmartSockets" static="true">
      <method name="StartServer" static="true" public="true">
        <!--nodocs-->
        <params>
          <arg var="name" name="string" namespace="System" />
          <arg var="resolver" name="SmartSocketTypeResolver" namespace="Microsoft.Coyote.SmartSockets" />
          <arg var="ipAddress" name="string" namespace="System" />
          <arg var="udpGroupAddress" name="string" namespace="System" />
          <arg var="udpGroupPort" name="Int32" namespace="System" />
        </params>
        <returns name="SmartSocketServer" namespace="Microsoft.Coyote.SmartSockets" />
      </method>
      <method name="BroadcastAsync" public="true">
        <!--nodocs-->
        <params>
          <arg var="message" name="SocketMessage" namespace="Microsoft.Coyote.SmartSockets" />
        </params>
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="Stop" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <property name="GroupAddress" public="true" get="true" set="true">
        <type name="IPAddress" namespace="System.Net" />
      </property>
      <property name="GroupPort" public="true" get="true" set="true">
        <type name="Int32" namespace="System" />
      </property>
      <property name="EndPoint" public="true" get="true" set="true">
        <type name="IPEndPoint" namespace="System.Net" />
      </property>
      <event name="ClientConnected" public="true">
        <type name="EventHandler&lt;SmartSocketClient&gt;" namespace="System" />
      </event>
      <event name="ClientDisconnected" public="true">
        <type name="EventHandler&lt;SmartSocketClient&gt;" namespace="System" />
      </event>
      <event name="BackChannelOpened" public="true">
        <type name="EventHandler&lt;SmartSocketClient&gt;" namespace="System" />
      </event>
    </class>
    <class name="SmartSocketTypeResolver" namespace="Microsoft.Coyote.SmartSockets" static="true">
      <extends name="DataContractResolver" namespace="System.Runtime.Serialization" />
      <method class="SmartSocketTypeResolver" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="SmartSocketTypeResolver" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="knownTypes" name="Type[]" namespace="System" />
        </params>
      </method>
      <method class="SmartSocketTypeResolver" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="knownTypes" name="IEnumerable&lt;Type&gt;" namespace="System.Collections.Generic" />
        </params>
      </method>
      <method name="ResolveName" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="typeName" name="string" namespace="System" />
          <arg var="typeNamespace" name="string" namespace="System" />
          <arg var="declaredType" name="Type" namespace="System" />
          <arg var="knownTypeResolver" name="DataContractResolver" namespace="System.Runtime.Serialization" />
        </params>
        <returns name="Type" namespace="System" />
      </method>
      <method name="TryResolveType" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="type" name="Type" namespace="System" />
          <arg var="declaredType" name="Type" namespace="System" />
          <arg var="knownTypeResolver" name="DataContractResolver" namespace="System.Runtime.Serialization" />
          <arg var="typeName" by="ref" name="XmlDictionaryString@" namespace="System.Xml" />
          <arg var="typeNamespace" by="ref" name="XmlDictionaryString@" namespace="System.Xml" />
        </params>
        <returns name="Boolean" namespace="System" />
      </method>
    </class>
    <class name="SocketMessage" namespace="Microsoft.Coyote.SmartSockets" static="true">
      <method class="SocketMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="id" name="string" namespace="System" />
          <arg var="sender" name="string" namespace="System" />
        </params>
      </method>
      <property name="Id" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="Sender" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="Message" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="DgmlTestModelSchema" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <field name="Schema" public="true" static="true">
        <type name="GraphSchema" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="EntryPointCategory" public="true" static="true">
        <type name="GraphCategory" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="SingletonCategory" public="true" static="true">
        <type name="GraphCategory" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="BreakpointCategory" public="true" static="true">
        <type name="GraphCategory" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="PriorityProperty" public="true" static="true">
        <type name="GraphProperty" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="ChildPriorityProperty" public="true" static="true">
        <type name="GraphProperty" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="DisabledProperty" public="true" static="true">
        <type name="GraphProperty" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <method class="DgmlTestModelSchema" name="#ctor">
        <!--nodocs-->
      </method>
    </class>
    <class name="DgmlTestModel" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <method class="DgmlTestModel" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="target" name="object" namespace="System" />
          <arg var="log" name="TextWriter" namespace="System.IO" />
          <arg var="r" name="Random" namespace="System" />
        </params>
      </method>
      <method name="Load" public="true">
        <!--nodocs-->
        <params>
          <arg var="path" name="string" namespace="System" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Run" public="true">
        <!--nodocs-->
        <params>
          <arg var="until" name="Predicate&lt;DgmlTestModel&gt;" namespace="System" />
          <arg var="sleep" name="Int32" namespace="System" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Stop" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <property name="StatesExecuted" public="true" get="true" set="true">
        <type name="Int32" namespace="System" />
      </property>
    </class>
    <class name="GraphStateReader" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <implements name="IDisposable" namespace="System" />
      <method class="GraphStateReader" name="#ctor">
        <!--nodocs-->
      </method>
      <method name="Start" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <method name="Pause" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <method name="Resume" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <method name="Dispose" public="true" virtual="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <property name="IsPaused" public="true" get="true">
        <type name="Boolean" namespace="System" />
      </property>
      <event name="MessageReceived" public="true">
        <type name="EventHandler&lt;Message&gt;" namespace="System" />
      </event>
    </class>
    <class name="GraphStateWriter" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <method class="GraphStateWriter" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="log" name="TextWriter" namespace="System.IO" />
        </params>
      </method>
      <method name="Connect" public="true">
        <!--nodocs-->
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="LoadGraph" public="true">
        <!--nodocs-->
        <params>
          <arg var="path" name="string" namespace="System" />
        </params>
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="NavigateToNode" public="true">
        <!--nodocs-->
        <params>
          <arg var="node" name="GraphNode" namespace="Microsoft.VisualStudio.GraphModel" />
        </params>
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="NavigateLink" public="true">
        <!--nodocs-->
        <params>
          <arg var="link" name="GraphLink" namespace="Microsoft.VisualStudio.GraphModel" />
        </params>
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="WriteMessage" public="true">
        <!--nodocs-->
        <params>
          <arg var="format" name="string" namespace="System" />
          <arg var="args" name="Object[]" namespace="System" />
        </params>
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="Close" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
    </class>
    <enum name="MessageType" namespace="LovettSoftware.DgmlTestModeling" static="true" sealed="true">
      <field name="Connected" public="true" static="true" value="0">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="Disconnected" public="true" static="true" value="1">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="Ping" public="true" static="true" value="2">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="ClearText" public="true" static="true" value="3">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="LoadGraph" public="true" static="true" value="4">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="NavigateToNode" public="true" static="true" value="5">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="NavigateLink" public="true" static="true" value="6">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
    </enum>
    <class name="Message" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="SocketMessage" namespace="Microsoft.Coyote.SmartSockets" />
      <method class="Message" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="type" name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
          <arg var="message" name="string" namespace="System" />
        </params>
      </method>
      <method name="Merge" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="other" name="Message" namespace="LovettSoftware.DgmlTestModeling" />
        </params>
        <returns name="Boolean" namespace="System" />
      </method>
      <property name="Timestamp" public="true" get="true" set="true">
        <type name="Int64" namespace="System" />
      </property>
      <property name="Type" public="true" get="true" set="true">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </property>
    </class>
    <class name="ConnectedMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="ConnectedMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="ConnectedMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="user" name="string" namespace="System" />
        </params>
      </method>
      <property name="User" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="ClearTextMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="ClearTextMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="ClearTextMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="text" name="string" namespace="System" />
        </params>
      </method>
    </class>
    <class name="LoadGraphMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="LoadGraphMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="LoadGraphMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="path" name="string" namespace="System" />
        </params>
      </method>
      <property name="Path" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="CreateNodeMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="CreateNodeMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="CreateNodeMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="nodeId" name="string" namespace="System" />
          <arg var="nodeLabel" name="string" namespace="System" />
          <arg var="category" name="string" namespace="System" />
          <arg var="isGroup" name="Boolean" namespace="System" />
          <arg var="parentGroupId" name="string" namespace="System" />
        </params>
      </method>
      <property name="NodeId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="NodeLabel" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="Category" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="IsGroup" public="true" get="true" set="true">
        <type name="Boolean" namespace="System" />
      </property>
      <property name="ParentGroupId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="CreateLinkMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="CreateLinkMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="CreateLinkMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="sourceId" name="string" namespace="System" />
          <arg var="targetId" name="string" namespace="System" />
          <arg var="label" name="string" namespace="System" />
          <arg var="index" name="Int32" namespace="System" />
          <arg var="category" name="string" namespace="System" />
        </params>
      </method>
      <property name="SourceId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="TargetId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="Label" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="Index" public="true" get="true" set="true">
        <type name="Int32" namespace="System" />
      </property>
      <property name="Category" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="NavigateNodeMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="NavigateNodeMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="NavigateNodeMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="nodeId" name="string" namespace="System" />
        </params>
      </method>
      <property name="NodeId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="NavigateLinkMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="NavigateLinkMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="NavigateLinkMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="srcNodeId" name="string" namespace="System" />
          <arg var="targetNodeId" name="string" namespace="System" />
        </params>
      </method>
      <property name="SourceNodeId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="TargetNodeId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="MessageEventArgs" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <method class="MessageEventArgs" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="message" name="Message" namespace="LovettSoftware.DgmlTestModeling" />
        </params>
      </method>
      <property name="Message" public="true" get="true" set="true">
        <type name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      </property>
    </class>
  </assembly>
</doc>