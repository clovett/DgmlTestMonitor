<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet  type='text/xsl' href='doc.xslt'?>
<!--#################################################-->
<!--###  This file was generated by ILToXml.exe.  ###-->
<!--###  Do not edit by hand.                     ###-->
<!--#################################################-->
<doc>
  <assembly>
    <name>LovettSoftware.DgmlTestModeling</name>
    <class name="DgmlTestModelSchema" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <field name="Schema" public="true" static="true">
        <type name="GraphSchema" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="EntryPointCategory" public="true" static="true">
        <type name="GraphCategory" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="SingletonCategory" public="true" static="true">
        <type name="GraphCategory" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="BreakpointCategory" public="true" static="true">
        <type name="GraphCategory" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="PriorityProperty" public="true" static="true">
        <type name="GraphProperty" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="ChildPriorityProperty" public="true" static="true">
        <type name="GraphProperty" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <field name="DisabledProperty" public="true" static="true">
        <type name="GraphProperty" namespace="Microsoft.VisualStudio.GraphModel" />
      </field>
      <method class="DgmlTestModelSchema" name="#ctor">
        <!--nodocs-->
      </method>
    </class>
    <class name="DgmlTestModel" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <method class="DgmlTestModel" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="target" name="object" namespace="System" />
          <arg var="log" name="TextWriter" namespace="System.IO" />
          <arg var="r" name="Random" namespace="System" />
        </params>
      </method>
      <method name="Load" public="true">
        <!--nodocs-->
        <params>
          <arg var="path" name="string" namespace="System" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Run" public="true">
        <!--nodocs-->
        <params>
          <arg var="until" name="Predicate&lt;DgmlTestModel&gt;" namespace="System" />
          <arg var="sleep" name="Int32" namespace="System" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Stop" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <property name="StatesExecuted" public="true" get="true" set="true">
        <type name="Int32" namespace="System" />
      </property>
    </class>
    <class name="GraphStateReader" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <implements name="IDisposable" namespace="System" />
      <method class="GraphStateReader" name="#ctor">
        <!--nodocs-->
      </method>
      <method name="Start" public="true">
        <!--nodocs-->
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="Pause" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <method name="Resume" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <method name="Dispose" public="true" virtual="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <property name="IsPaused" public="true" get="true">
        <type name="Boolean" namespace="System" />
      </property>
      <event name="MessageReceived" public="true">
        <type name="EventHandler&lt;Message&gt;" namespace="System" />
      </event>
    </class>
    <class name="GraphStateWriter" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <method class="GraphStateWriter" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="log" name="TextWriter" namespace="System.IO" />
        </params>
      </method>
      <method name="Connect" public="true">
        <!--nodocs-->
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <method name="LoadGraph" public="true">
        <!--nodocs-->
        <params>
          <arg var="path" name="string" namespace="System" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="NavigateToNode" public="true">
        <!--nodocs-->
        <params>
          <arg var="node" name="GraphNode" namespace="Microsoft.VisualStudio.GraphModel" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="NavigateLink" public="true">
        <!--nodocs-->
        <params>
          <arg var="link" name="GraphLink" namespace="Microsoft.VisualStudio.GraphModel" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="WriteMessage" public="true">
        <!--nodocs-->
        <params>
          <arg var="format" name="string" namespace="System" />
          <arg var="args" name="Object[]" namespace="System" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Close" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
    </class>
    <enum name="MessageType" namespace="LovettSoftware.DgmlTestModeling" static="true" sealed="true">
      <field name="Connected" public="true" static="true" value="0">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="Disconnected" public="true" static="true" value="1">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="Ping" public="true" static="true" value="2">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="ClearText" public="true" static="true" value="3">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="LoadGraph" public="true" static="true" value="4">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="NavigateToNode" public="true" static="true" value="5">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
      <field name="NavigateLink" public="true" static="true" value="6">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </field>
    </enum>
    <class name="Message" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <field name="MessageHeader" public="true" static="true">
        <type name="UInt32" namespace="System" />
      </field>
      <method class="Message" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="type" name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
        </params>
      </method>
      <method name="Merge" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="other" name="Message" namespace="LovettSoftware.DgmlTestModeling" />
        </params>
        <returns name="Boolean" namespace="System" />
      </method>
      <method name="Write" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="writer" name="BinaryWriter" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Read" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="reader" name="BinaryReader" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Create" static="true" public="true">
        <!--nodocs-->
        <params>
          <arg var="reader" name="BinaryReader" namespace="System.IO" />
        </params>
        <returns name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      </method>
      <method name="ToArray" public="true">
        <!--nodocs-->
        <returns name="Byte[]" namespace="System" />
      </method>
      <property name="MessageId" public="true" get="true" set="true">
        <type name="Int64" namespace="System" />
      </property>
      <property name="Timestamp" public="true" get="true" set="true">
        <type name="Int64" namespace="System" />
      </property>
      <property name="Type" public="true" get="true">
        <type name="MessageType" namespace="LovettSoftware.DgmlTestModeling" />
      </property>
    </class>
    <class name="ConnectedMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="ConnectedMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="ConnectedMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="user" name="string" namespace="System" />
        </params>
      </method>
      <method name="Write" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="writer" name="BinaryWriter" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Read" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="reader" name="BinaryReader" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <property name="User" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="ClearTextMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="ClearTextMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="ClearTextMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="text" name="string" namespace="System" />
        </params>
      </method>
      <method name="Write" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="writer" name="BinaryWriter" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Read" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="reader" name="BinaryReader" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <property name="Message" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="LoadGraphMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="LoadGraphMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="LoadGraphMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="path" name="string" namespace="System" />
        </params>
      </method>
      <method name="Write" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="writer" name="BinaryWriter" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Read" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="reader" name="BinaryReader" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <property name="Path" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="NavigateNodeMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="NavigateNodeMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="NavigateNodeMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="nodeId" name="string" namespace="System" />
          <arg var="nodeLabel" name="string" namespace="System" />
        </params>
      </method>
      <method name="Write" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="writer" name="BinaryWriter" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Read" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="reader" name="BinaryReader" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <property name="NodeId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="NodeLabel" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
    </class>
    <class name="NavigateLinkMessage" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <extends name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      <method class="NavigateLinkMessage" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="NavigateLinkMessage" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="srcNodeId" name="string" namespace="System" />
          <arg var="srcNodeLabel" name="string" namespace="System" />
          <arg var="targetNodeId" name="string" namespace="System" />
          <arg var="targetNodeLabel" name="string" namespace="System" />
          <arg var="label" name="string" namespace="System" />
          <arg var="index" name="Int32" namespace="System" />
        </params>
      </method>
      <method name="Write" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="writer" name="BinaryWriter" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="Read" public="true" virtual="true">
        <!--nodocs-->
        <params>
          <arg var="reader" name="BinaryReader" namespace="System.IO" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <property name="SourceNodeId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="SourceNodeLabel" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="TargetNodeId" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="TargetNodeLabel" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="Label" public="true" get="true" set="true">
        <type name="string" namespace="System" />
      </property>
      <property name="Index" public="true" get="true" set="true">
        <type name="Int32" namespace="System" />
      </property>
    </class>
    <class name="MessageEventArgs" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <method class="MessageEventArgs" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="message" name="Message" namespace="LovettSoftware.DgmlTestModeling" />
        </params>
      </method>
      <property name="Message" public="true" get="true" set="true">
        <type name="Message" namespace="LovettSoftware.DgmlTestModeling" />
      </property>
    </class>
    <class name="ConnectionLostEventArgs" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <method class="ConnectionLostEventArgs" name="#ctor">
        <!--nodocs-->
      </method>
      <property name="ReceiveError" public="true" get="true" set="true">
        <type name="Exception" namespace="System" />
      </property>
      <property name="AutoReconnect" public="true" get="true" set="true">
        <type name="Boolean" namespace="System" />
      </property>
    </class>
    <class name="SmartSocketClient" namespace="LovettSoftware.DgmlTestModeling" static="true">
      <implements name="IDisposable" namespace="System" />
      <method class="SmartSocketClient" name="#ctor">
        <!--nodocs-->
      </method>
      <method class="SmartSocketClient" name="#ctor">
        <!--nodocs-->
        <params>
          <arg var="socket" name="StreamSocket" namespace="Windows.Networking.Sockets" />
        </params>
      </method>
      <method name="Dispose" public="true" virtual="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <method name="ConnectAsync" public="true">
        <!--nodocs-->
        <params>
          <arg var="server" name="string" namespace="System" />
          <arg var="port" name="Int32" namespace="System" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <method name="SendAsync" public="true">
        <!--nodocs-->
        <params>
          <arg var="message" name="Message" namespace="LovettSoftware.DgmlTestModeling" />
        </params>
        <returns name="void" namespace="System" />
      </method>
      <event name="Error" public="true">
        <type name="EventHandler&lt;Exception&gt;" namespace="System" />
      </event>
      <event name="ConnectionLost" public="true">
        <type name="EventHandler&lt;ConnectionLostEventArgs&gt;" namespace="System" />
      </event>
      <event name="Connected" public="true">
        <type name="EventHandler" namespace="System" />
      </event>
      <event name="MessageReceived" public="true">
        <type name="EventHandler&lt;Message&gt;" namespace="System" />
      </event>
    </class>
    <class name="SmartSocketListener" namespace="LovettSoftware.DgmlTestModeling" static="true" sealed="true">
      <method class="SmartSocketListener" name="#ctor">
        <!--nodocs-->
      </method>
      <method name="Close" public="true">
        <!--nodocs-->
        <returns name="void" namespace="System" />
      </method>
      <method name="StartListening" public="true">
        <!--nodocs-->
        <params>
          <arg var="portNumber" name="Int32" namespace="System" />
        </params>
        <returns name="Task" namespace="System.Threading.Tasks" />
      </method>
      <property name="IsPaused" public="true" get="true" set="true">
        <type name="Boolean" namespace="System" />
      </property>
      <event name="ClientConnected" public="true">
        <type name="EventHandler&lt;SmartSocketClient&gt;" namespace="System" />
      </event>
      <event name="ClientDisconnected" public="true">
        <type name="EventHandler&lt;SmartSocketClient&gt;" namespace="System" />
      </event>
      <event name="AdapterFound" public="true">
        <type name="EventHandler&lt;String&gt;" namespace="System" />
      </event>
    </class>
  </assembly>
</doc>